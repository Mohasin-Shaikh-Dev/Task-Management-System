package com.example.www.customTest;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.example.www.dto.TaskDto;
import com.example.www.entity.Status;
import com.example.www.entity.Task;
import com.example.www.mapper.TaskMapper;
import com.example.www.repository.TaskRepository;
import com.example.www.service.TaskService;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class TaskServiceTest {
	
	@Autowired
	private TaskService taskService;
	
	TaskMapper mapper=new TaskMapper();
	
	@Mock
	private TaskRepository taskRepository; //Mocked Task repository to simulate(fake) database interaction
	
	 Task task1 = new Task(1, "Task1", "Description1", LocalDate.now(), Status.IN_PROCESS, LocalDateTime.now(), LocalDateTime.now());
     Task task2 = new Task(2, "Task2", "Description2", LocalDate.now(), Status.COMPLETED, LocalDateTime.now(), LocalDateTime.now());
     
     // Creating Task DTOs
     TaskDto taskDto1 = new TaskDto(1, "Task1", "Description1", LocalDate.now(), Status.IN_PROCESS, LocalDateTime.now(), LocalDateTime.now());
     TaskDto taskDto2 = new TaskDto(2, "Task2", "Description2", LocalDate.now(), Status.COMPLETED, LocalDateTime.now(), LocalDateTime.now());
     
	//test case for the getAllTask method
	@Test
	public void getAllTasks()
	{
		
		assertEquals(4,2+2);
	}

}
