package com.example.www.customTest;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.example.www.dto.TaskDto;
import com.example.www.entity.Status;
import com.example.www.entity.Task;
import com.example.www.mapper.TaskMapper;
import com.example.www.repository.TaskRepository;
import com.example.www.service.TaskService;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class TaskServiceTest {
	
	@Autowired
	private TaskService taskService;
	
	@Autowired
	private TaskMapper mapper;
	@Mock
	private TaskRepository taskRepository; //Mocked Task repository to simulate(fake) database interaction
	
	//test case for the getAllTask method
	@Test
	public void getAllTasks()
	{
		Task task1=new Task(1, "Task1", "Description1", LocalDate.now(), Status.IN_PROCESS, LocalDateTime.now(), LocalDateTime.now());
		Task task2=new Task(2, "Task2", "Description1", LocalDate.now(), Status.COMPLETED, LocalDateTime.now(), LocalDateTime.now());
		List<Task> allTask=Arrays.asList(task1,task2);	
		Mockito.when(taskRepository.findAll()).thenReturn(allTask);
		List<Task> collects = taskService.getAllTasks().stream()
								 .map(task -> mapper.toEntity(task))
								 .collect(Collectors.toList());
		assertEquals(2,collects.size());
	}

}
